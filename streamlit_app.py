import asyncio

# ƒê·∫£m b·∫£o r·∫±ng c√≥ v√≤ng l·∫∑p s·ª± ki·ªán (Event Loop) khi s·ª≠ d·ª•ng asyncio trong Streamlit
try:
    loop = asyncio.get_running_loop()
except RuntimeError:
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
import os
import streamlit as st
# === Giao di·ªán Streamlit ===
st.set_page_config(
    page_title="Tra c·ª©u ƒêi·ªÅu l·ªá ƒêo√†n",
    page_icon="https://quanlydoanvien.doanthanhnien.vn/favicon.ico",
    layout="wide"  # <== B·∫≠t ch·∫ø ƒë·ªô wide mode
)
st.title("üìò Tra c·ª©u ƒêi·ªÅu l·ªá ƒêo√†n TNCS H·ªì Ch√≠ Minh")

from dotenv import load_dotenv
# Tr√°nh l·ªói lazy loader c·ªßa PyTorch khi d√πng v·ªõi Streamlit
os.environ["PYTORCH_NO_LAZY_LOADER"] = "1"

from llama_index.core import Settings, PromptTemplate
from llama_index.core import VectorStoreIndex, SimpleDirectoryReader, StorageContext, load_index_from_storage

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
os.environ["GOOGLE_API_KEY"] = os.getenv("GOOGLE_API_KEY")
model_name = "models/gemini-2.0-flash"

if not os.environ.get("GOOGLE_API_KEY"):
    st.error("‚ùå Ch∆∞a c√≥ GOOGLE_API_KEY trong .env! H√£y t·∫°o file .env v√† th√™m kh√≥a.")
    st.stop()
# C·∫•u h√¨nh th∆∞ m·ª•c
DATA_DIR = "data_dieu_le_doan"
PERSIST_DIR = "doan_index_storage"
TTL = 24 * 60 * 60

# === D√πng cache ƒë·ªÉ tr√°nh reload model m·ªói l·∫ßn Streamlit refresh ===
@st.cache_data(ttl=TTL, show_spinner="ƒêang kh·ªüi t·∫°o")
def load_embed_model_gemini():
    from llama_index.llms.google_genai import GoogleGenAI
    return GoogleGenAI(model=model_name, api_key=os.environ["GOOGLE_API_KEY"])
@st.cache_data(ttl=TTL, show_spinner="ƒêang kh·ªüi t·∫°o")
def load_embed_model():
    from llama_index.embeddings.huggingface import HuggingFaceEmbedding
    return HuggingFaceEmbedding(model_name="BAAI/bge-small-en-v1.5")

embed_model = load_embed_model()
llm = load_embed_model_gemini()

Settings.llm = llm
Settings.embed_model = embed_model

# Kh·ªüi t·∫°o ho·∫∑c n·∫°p ch·ªâ m·ª•c
@st.cache_data(ttl=TTL, show_spinner="ƒêang kh·ªüi t·∫°o")
def setup_index():
    if os.path.exists(os.path.join(PERSIST_DIR, "docstore.json")):
        print("üîÅ ƒêang t·∫£i l·∫°i ch·ªâ m·ª•c t·ª´ b·ªô nh·ªõ...")
        storage_context = StorageContext.from_defaults(persist_dir=PERSIST_DIR)
        return load_index_from_storage(storage_context)
    else:
        print("üõ†Ô∏è ƒêang t·∫°o m·ªõi ch·ªâ m·ª•c...")
        reader = SimpleDirectoryReader(input_dir=DATA_DIR)
        documents = reader.load_data()
        index = VectorStoreIndex.from_documents(documents)
        index.storage_context.persist(persist_dir=PERSIST_DIR)
        return index

# === T·∫†O PROMPT T√ôY CH·ªàNH ===
QA_PROMPT_TMPL = (
    "B·∫°n l√† m·ªôt tr·ª£ l√Ω hi·ªÉu bi·∫øt v·ªÅ ƒêi·ªÅu l·ªá ƒêo√†n TNCS H·ªì Ch√≠ Minh. "
    "Tr·∫£ l·ªùi c√°c c√¢u h·ªèi d∆∞·ªõi ƒë√¢y m·ªôt c√°ch chi ti·∫øt, ch√≠nh x√°c v√† s·ª≠ d·ª•ng ng√¥n ng·ªØ ph√°p l√Ω. "
    "N·∫øu c√≥ th·ªÉ, h√£y tr√≠ch d·∫´n c·ª• th·ªÉ c√°c ƒëi·ªÅu, kho·∫£n trong ƒêi·ªÅu l·ªá ƒêo√†n. "
    "N·∫øu c√¢u h·ªèi v∆∞·ª£t qu√° ph·∫°m vi t√†i li·ªáu, b·∫°n c√≥ th·ªÉ t√¨m ki·∫øm th√™m t·ª´ c√°c ngu·ªìn uy t√≠n. "
    "C√¢u h·ªèi: {query_str}\n"
    "T√†i li·ªáu tham kh·∫£o:\n{context_str}\n\n"
    "Tr·∫£ l·ªùi:"
)
qa_prompt = PromptTemplate(QA_PROMPT_TMPL)

index = setup_index()
query_engine = index.as_query_engine(similarity_top_k=4)
query_engine.update_prompts({"response_synthesizer:text_qa_template": qa_prompt})

# H·ªèi Gemini t·ª± do (fallback khi d·ªØ li·ªáu kh√¥ng ƒë·ªß)
def ask_gemini_directly(question):
    try:
        return llm.complete(f"{question} Trong tr∆∞·ªùng h·ª£p n√†y, b·∫°n c√≥ th·ªÉ t√¨m ki·∫øm tr√™n web ƒë·ªÉ cung c·∫•p th√™m th√¥ng tin.").text
    except Exception as e:
        return f"‚ùå ƒê√£ x·∫£y ra l·ªói khi h·ªèi Gemini: {e}"

query = st.text_input("Nh·∫≠p c√¢u h·ªèi:", placeholder="V√≠ d·ª•: Quy·ªÅn c·ªßa ƒëo√†n vi√™n l√† g√¨?", key="query_input")
submit = st.button("üß† Tr·∫£ l·ªùi") or (query and st.session_state.query_input)
if submit:
    with st.spinner("üîç ƒêang t√¨m c√¢u tr·∫£ l·ªùi t·ª´ ƒêi·ªÅu l·ªá..."):
        response = query_engine.query(query)
        answer = response.response.strip()

        if len(answer) < 30:
            st.markdown("üåê **Kh√¥ng ƒë·ªß d·ªØ li·ªáu n·ªôi b·ªô, ƒëang h·ªèi Gemini v·ªõi t√¨m ki·∫øm m·ªü r·ªông...**")
            fallback = ask_gemini_directly(query)
            st.markdown(fallback)
        else:
            st.markdown("‚úÖ **Tr·∫£ l·ªùi t·ª´ ƒêi·ªÅu l·ªá ƒêo√†n:**")
            st.markdown(answer)
